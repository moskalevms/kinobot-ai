import tkinter as tk
from tkinter import ttk, scrolledtext
from agent import MovieAgent


class MovieBotGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Kinobot AI - –ü–æ–¥–±–æ—Ä —Ñ–∏–ª—å–º–æ–≤")
        self.root.geometry("700x600")

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        self.use_api = tk.BooleanVar(value=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        self.agent = MovieAgent(use_api=self.use_api.get())

        self.create_widgets()

    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="Kinobot AI", font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 10))

        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = ttk.Label(main_frame, text="–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É —Ñ–∏–ª—å–º–æ–≤", font=("Arial", 10))
        subtitle_label.grid(row=1, column=0, columnspan=2, pady=(0, 10))

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞
        mode_frame = ttk.Frame(main_frame)
        mode_frame.grid(row=2, column=0, columnspan=2, pady=(0, 10))

        ttk.Label(mode_frame, text="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:").pack(side=tk.LEFT)
        ttk.Radiobutton(mode_frame, text="API", variable=self.use_api, value=True, command=self.update_mode).pack(
            side=tk.LEFT, padx=5)
        ttk.Radiobutton(mode_frame, text="–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç", variable=self.use_api, value=False,
                        command=self.update_mode).pack(side=tk.LEFT, padx=5)

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∂–∞–Ω—Ä–∞
        ttk.Label(main_frame, text="–ñ–∞–Ω—Ä:").grid(row=3, column=0, sticky=tk.W, pady=(0, 5))
        self.genre_var = tk.StringVar()
        genre_entry = ttk.Entry(main_frame, textvariable=self.genre_var, width=30)
        genre_entry.grid(row=3, column=1, sticky=(tk.W, tk.E), pady=(0, 5))

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º
        genres_text = ", ".join(list(self.agent.genres.values())[:10]) + "..."
        ttk.Label(main_frame, text=f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã: {genres_text}", font=("Arial", 8), foreground="gray").grid(row=4,
                                                                                                                 column=1,
                                                                                                                 sticky=tk.W,
                                                                                                                 pady=(
                                                                                                                     0,
                                                                                                                     10))

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞
        ttk.Label(main_frame, text="–ì–æ–¥:").grid(row=5, column=0, sticky=tk.W, pady=(0, 5))
        self.year_var = tk.StringVar()
        year_entry = ttk.Entry(main_frame, textvariable=self.year_var, width=30)
        year_entry.grid(row=5, column=1, sticky=(tk.W, tk.E), pady=(0, 20))

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        search_button = ttk.Button(main_frame, text="–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º", command=self.search_movie)
        search_button.grid(row=6, column=0, columnspan=2, pady=(0, 20))

        # –ü–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        ttk.Label(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç:").grid(row=7, column=0, sticky=tk.W, pady=(0, 5))
        self.result_text = scrolledtext.ScrolledText(main_frame, width=80, height=20, wrap=tk.WORD)
        self.result_text.grid(row=8, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W)
        status_bar.grid(row=1, column=0, sticky=(tk.W, tk.E))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(8, weight=1)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
        genre_entry.bind('<Return>', lambda event: self.search_movie())
        year_entry.bind('<Return>', lambda event: self.search_movie())

    def update_mode(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
        self.agent = MovieAgent(use_api=self.use_api.get())
        self.status_var.set(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'API' if self.use_api.get() else '–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç'}")

    def search_movie(self):
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        genre = self.genre_var.get().strip()
        year_str = self.year_var.get().strip()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–æ–¥ –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω
        year = int(year_str) if year_str else None

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_var.set("–ü–æ–∏—Å–∫...")
        self.root.update()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            recommendation = self.agent.recommend_movie(genre_name=genre, year=year)

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.result_text.delete(1.0, tk.END)

            if "error" in recommendation:
                self.result_text.insert(tk.END, recommendation["error"])
                self.result_text.insert(tk.END, "\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã –≤ –±–∞–∑–µ:\n")
                all_genres = list(self.agent.genres.values())
                self.result_text.insert(tk.END, ", ".join(all_genres))
            else:
                result = f"üé¨ –ö–∞–∫ –Ω–∞—Å—á—ë—Ç: {recommendation['title']} ({recommendation['year']})\n\n"
                result += f"üìÄ –ñ–∞–Ω—Ä: {recommendation['genre']}\n\n"
                result += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {recommendation['rating']}/10\n\n"
                result += f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {recommendation['description']}\n\n"
                result += f"‚ÑπÔ∏è  –ò—Å—Ç–æ—á–Ω–∏–∫: {recommendation.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"

                self.result_text.insert(tk.END, result)

            self.status_var.set("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")

        except ValueError:
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, "–û—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥.")
            self.status_var.set("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
        except Exception as e:
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            self.status_var.set("–û—à–∏–±–∫–∞")


def run_gui():
    root = tk.Tk()
    app = MovieBotGUI(root)
    root.mainloop()


if __name__ == "__main__":
    run_gui()