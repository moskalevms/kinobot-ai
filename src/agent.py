import os
import random
from pathlib import Path
import pandas as pd
from dotenv import load_dotenv

from src.client.tmdb_client import TMDBClient
from src.client.omdb_client import OMDBClient
from src.client.kinopoisk_client import KinopoiskClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ .env
TMDB_PROXIES = {
    "http": os.getenv("TMDB_HTTP_PROXY", "").strip() or None,
    "https": os.getenv("TMDB_HTTPS_PROXY", "").strip() or None
}
# –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–ª—é—á–∏
TMDB_PROXIES = {k: v for k, v in TMDB_PROXIES.items() if v}

class MovieAgent:
    def __init__(self, use_api=True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        :param use_api: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ API (True) –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç (False)
        """
        self.use_api = use_api
        self.data_path = Path(__file__).parent.parent / "data" / "processed" / "imdb" / "imdb_top_1000.csv"

        if use_api:
            # üëá –ü–µ—Ä–µ–¥–∞—ë–º –ø—Ä–æ–∫—Å–∏ –¢–û–õ–¨–ö–û –≤ TMDBClient
            self.tmdb_client = TMDBClient(proxies=TMDB_PROXIES)
            # üëá OMDB –∏ Kinopoisk ‚Äî –±–µ–∑ –ø—Ä–æ–∫—Å–∏
            self.omdb_client = OMDBClient()
            self.kinopoisk_client = KinopoiskClient()
            self.genres = self._load_genres_from_tmdb()
        else:
            self.df = self._load_data_from_csv()
            self.genres = self._load_genres_from_csv()

    def _load_data_from_csv(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV"""
        df = pd.read_csv(self.data_path)

        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        df['Genre'] = df['Genre'].str.lower()
        df['Series_Title'] = df['Series_Title'].str.title()
        df['Released_Year'] = pd.to_numeric(df['Released_Year'], errors='coerce')

        return df

    def _load_genres_from_csv(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∂–∞–Ω—Ä–æ–≤ –∏–∑ CSV"""
        all_genres = self.df['Genre'].str.split(',').explode().str.strip().unique()
        return {i: genre for i, genre in enumerate(all_genres)}

    def _load_genres_from_tmdb(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∂–∞–Ω—Ä–æ–≤ –∏–∑ TMDB"""
        genres = self.tmdb_client.get_genres()
        return {genre['id']: genre['name'] for genre in genres}

    def _recommend_from_csv(self, genre_name=None, year=None):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        filtered_df = self.df.copy()

        if genre_name:
            genre_lower = genre_name.lower()
            filtered_df = filtered_df[filtered_df['Genre'].str.contains(genre_lower, na=False, case=False)]

        if year:
            filtered_df = filtered_df[filtered_df['Released_Year'] == year]

        if filtered_df.empty:
            return {"error": "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}

        random_movie = filtered_df.sample(1).iloc[0]

        return {
            "title": random_movie['Series_Title'],
            "year": str(random_movie['Released_Year']),
            "genre": random_movie['Genre'],
            "rating": random_movie['IMDB_Rating'],
            "description": random_movie['Overview'],
            "source": "local dataset"
        }

    def _recommend_from_api(self, genre_name=None, year=None):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏–∑ API (—Å–Ω–∞—á–∞–ª–∞ Kinopoisk, –∑–∞—Ç–µ–º TMDB/OMDB)"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Kinopoisk
        kinopoisk_recommendation = self._recommend_from_kinopoisk(genre_name, year)
        if kinopoisk_recommendation:
            return kinopoisk_recommendation

        # –ï—Å–ª–∏ Kinopoisk –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É (TMDB + OMDB)
        print("Kinopoisk –Ω–µ –Ω–∞—à–µ–ª —Ñ–∏–ª—å–º–æ–≤, –ø—Ä–æ–±—É–µ–º TMDB...")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ –≤ ID –¥–ª—è TMDB
        genre_id = None
        if genre_name:
            genre_name_lower = genre_name.lower()
            for gid, name in self.genres.items():
                if genre_name_lower in name.lower():
                    genre_id = gid
                    break

        # –ò—â–µ–º —Ñ–∏–ª—å–º—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≤ TMDB
        result = self.tmdb_client.search_movies(genre=genre_id, year=year)

        if not result or 'results' not in result or not result['results']:
            return {"error": "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}

        # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–µ—Ç–æ–¥–∞ _recommend_from_api –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        movies = result['results']
        random_movie = random.choice(movies)

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ OMDB
        omdb_data = None
        if random_movie.get('title'):
            omdb_data = self.omdb_client.search_movies(title=random_movie['title'], year=year)

        # –ï—Å–ª–∏ OMDB –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ TMDB
        if not omdb_data:
            movie_details = self.tmdb_client.get_movie_details(random_movie['id'])

            if not movie_details:
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ"}

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∂–∞–Ω—Ä—ã
            movie_genres = ", ".join([genre['name'] for genre in movie_details.get('genres', [])])

            return {
                "title": movie_details.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                "year": movie_details.get('release_date', '')[:4] if movie_details.get(
                    'release_date') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                "genre": movie_genres,
                "rating": movie_details.get('vote_average', 0),
                "description": movie_details.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
                "source": "TMDB API"
            }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ OMDB
        return {
            "title": omdb_data.get('Title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            "year": omdb_data.get('Year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            "genre": omdb_data.get('Genre', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            "rating": omdb_data.get('imdbRating', 0),
            "description": omdb_data.get('Plot', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            "source": "OMDB API"
        }

    def _recommend_from_kinopoisk(self, genre_name=None, year=None):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏–∑ Kinopoisk API"""
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é, API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
            result = self.kinopoisk_client.search_movies(genre=genre_name, year=year)

            if not result or 'docs' not in result or not result['docs']:
                return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            movies = result['docs']
            random_movie = random.choice(movies)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∂–∞–Ω—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
            movie_genres = ", ".join([g['name'] for g in random_movie.get('genres', [])])

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            return {
                "title": random_movie.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                "year": str(random_movie.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')),
                "genre": movie_genres,
                "rating": random_movie.get('rating', {}).get('kp', 0),  # –†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
                "description": random_movie.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
                "source": "Kinopoisk API"
            }

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Kinopoisk API: {e}")
            return None

    def recommend_movie(self, genre_name=None, year=None):
        """
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        :param genre_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :param year: –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ
        """
        if self.use_api:
            try:
                return self._recommend_from_api(genre_name, year)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}. –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç.")
                return self._recommend_from_csv(genre_name, year)
        else:
            return self._recommend_from_csv(genre_name, year)


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
def run_console_agent(use_api=True):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = MovieAgent(use_api=use_api)

    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∏–Ω–æ–±–æ—Ç! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º —Ñ–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä.")
    print(f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {'API' if use_api else '–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç'}")
    print("–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∂–∞–Ω—Ä –∏/–∏–ª–∏ –≥–æ–¥, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å Enter –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞.")

    # –ü–æ–∫–∞–∂–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:")
    genres_list = list(agent.genres.values())
    print(", ".join(genres_list[:10]) + ("..." if len(genres_list) > 10 else ""))

    while True:
        try:
            # –ó–∞–ø—Ä–æ—Å –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            genre_input = input("\n–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä: ").strip()
            year_input = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020): ").strip()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            genre = genre_input if genre_input else None
            year = int(year_input) if year_input else None

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            recommendation = agent.recommend_movie(genre_name=genre, year=year)

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if "error" in recommendation:
                print(recommendation["error"])
            else:
                print(f"\nüé¨ –ö–∞–∫ –Ω–∞—Å—á—ë—Ç: {recommendation['title']} ({recommendation['year']})")
                print(f"üìÄ –ñ–∞–Ω—Ä: {recommendation['genre']}")
                print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {recommendation['rating']}/10")
                print(f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {recommendation['description']}")
                print(f"‚ÑπÔ∏è  –ò—Å—Ç–æ—á–Ω–∏–∫: {recommendation.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–∏
            continue_input = input("\n–•–æ—Ç–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç? (y/n): ").strip().lower()
            if continue_input != 'y':
                print("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")
                break

        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥.")
        except KeyboardInterrupt:
            print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            break


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='Kinobot AI - –ø–æ–¥–±–æ—Ä —Ñ–∏–ª—å–º–æ–≤')
    parser.add_argument('--local', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –≤–º–µ—Å—Ç–æ API')

    args = parser.parse_args()

    run_console_agent(use_api=not args.local)